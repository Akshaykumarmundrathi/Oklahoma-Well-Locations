# -*- coding: utf-8 -*-
"""oklahoma_well_location_map

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fltgRIk7kHYY_ffUWmflepNomrhxuHdz
"""

# ========================================
# üîπ Oklahoma Well Locations Extraction + Interactive Map (Improved)
# ========================================

# Step 0: Install dependencies (run once)
!pip install PyMuPDF pytesseract pdf2image pandas openpyxl requests pyproj opencv-python-headless tqdm folium

import os
import re
import fitz  # PyMuPDF
import pandas as pd
from tqdm import tqdm
import folium
from folium.plugins import MarkerCluster

# Input/output settings
pdf_path = "/content/PDFs_Well_Location_20250523_140405.pdf"
out_csv = "oklahoma_wells_text_extract_with_latlon.csv"
out_html = "index.html"

# Robust regex to extract latitude and longitude from randymajors link (handles y= and y;=)
def extract_lat_lon_from_link_text(link_text):
    pattern = re.compile(
        r"x=([-+]?\d*\.\d+|\d+)[;&]?\s*y;?=([-+]?\d*\.\d+|\d+)",
        re.IGNORECASE,
    )
    link_text = link_text.replace('\n', '')
    m = pattern.search(link_text)
    if not m:
        return None, None
    try:
        lon = float(m.group(1))
        lat = float(m.group(2))
        return lat, lon
    except Exception:
        return None, None

# Read entire PDF text
try:
    doc = fitz.open(pdf_path)
except Exception as e:
    raise SystemExit(f"‚ùå Cannot open PDF: {pdf_path}\n{e}")

all_text = "\n".join(page.get_text("text") for page in doc)
doc.close()

# Split into reports by 'Report for:' header
raw_blocks = re.split(r"Report for:\s*", all_text, flags=re.IGNORECASE)
blocks = [b.strip() for b in raw_blocks if b.strip()]

records = []
for block in tqdm(blocks, desc="Processing reports"):
    lines = [ln.strip() for ln in block.splitlines() if ln.strip()]
    report_name = lines[0] if lines else None
    county = section = township = rng = link = lat = lon = None

    # Flexible field extraction to handle different spacings and colon placements
    for i, line in enumerate(lines):
        if "County" in line and "Section" in line and "Township" in line and "Range" in line:
            county_match = re.search(r"County\s*[:]? *([^,]+)", line, re.IGNORECASE)
            section_match = re.search(r"Section\s*[:]? *([0-9]{1,3})", line, re.IGNORECASE)
            township_match = re.search(r"Township\s*[:]? *([\d]+[ ]?[NS])", line, re.IGNORECASE)
            range_match = re.search(r"Range\s*[:]? *([\d]+[ ]?[EW])", line, re.IGNORECASE)

            county = county_match.group(1).strip() if county_match else None
            section = section_match.group(1).strip() if section_match else None
            township = township_match.group(1).strip() if township_match else None
            rng = range_match.group(1).strip() if range_match else None

        # Flexible link detection anywhere following these lines
        if "randymajors.org" in line.lower():
            lat_tmp, lon_tmp = extract_lat_lon_from_link_text(line)
            if lat_tmp and lon_tmp:
                lat, lon = lat_tmp, lon_tmp
                link = line

    records.append({
        "Report Name": report_name,
        "County": county,
        "Section": section,
        "Township": township,
        "Range": rng,
        "Link": link,
        "Latitude": lat,
        "Longitude": lon
    })

df = pd.DataFrame(records)

# Crash-proof diagnostics: check columns before printing
required_cols = ["Report Name", "County", "Section", "Township", "Range", "Latitude", "Longitude"]
available_cols = [col for col in required_cols if col in df.columns]

print(f"‚úÖ Extracted {len(df)} reports.")
print(f"{df[['Latitude','Longitude']].dropna().shape[0]} reports have coordinates.")
print("Sample data columns present:", available_cols)
print(df[available_cols].head())

# Save CSV
df.to_csv(out_csv, index=False)

# Create interactive map with marker clustering
oklahoma_center = [35.4676, -97.5164]
m = folium.Map(location=oklahoma_center, zoom_start=7, tiles="OpenStreetMap")
marker_cluster = MarkerCluster().add_to(m)

for _, row in df.iterrows():
    if pd.notna(row["Latitude"]) and pd.notna(row["Longitude"]):
        popup_text = (
            f"<b>{row['Report Name']}</b><br>"
            f"County: {row['County']}<br>"
            f"Section: {row['Section']}<br>"
            f"Township: {row['Township']}<br>"
            f"Range: {row['Range']}<br>"
            f"Lat: {row['Latitude']}<br>"
            f"Lon: {row['Longitude']}"
        )
        folium.Marker(
            location=[row["Latitude"], row["Longitude"]],
            popup=popup_text,
            icon=folium.Icon(color="red", icon="tint", prefix="fa"),
        ).add_to(marker_cluster)

m.save(out_html)
print(f"‚úÖ Map saved as '{out_html}'. Open it in a browser to view.")